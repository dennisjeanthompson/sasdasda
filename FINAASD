import java.util.*;

// AVL tree node
class TreeNode {
    int data;
    TreeNode left;
    TreeNode right;
    int height;

    public TreeNode(int key) {
        this.data = key;
        this.height = 1; // new node is initially added at leaf
    }
}

public class AVLTree {
    // To get height of the tree
    int height(TreeNode N) {
        if (N == null) {
            return 0;
        }
        return N.height;
    }

    // To get maximum of two integers
    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    // Allocate New Node
    TreeNode newNode(int key) {
        return new TreeNode(key);
    }

    // A utility function to right rotate subtree rooted with y
    TreeNode rightRotation(TreeNode y) {
        TreeNode x = y.left;
        TreeNode T2 = x.right;

        // Perform rotation
        x.right = y;
        y.left = T2;

        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        // Return new root
        return x;
    }

    // A utility function to left rotate subtree rooted with x
    TreeNode leftRotation(TreeNode x) {
        TreeNode y = x.right;
        TreeNode T2 = y.left;

        // Perform rotation
        y.left = x;
        x.right = T2;

        // Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        // Return new root
        return y;
    }

    // Get Balance factor of node N
    int getHeightDiff(TreeNode N) {
        if (N == null) {
            return 0;
        }
        return height(N.left) - height(N.right);
    }

    // Recursive function to insert a key in the subtree rooted
    TreeNode insert(TreeNode node, int key) {
        // Same as BST insertion
        if (node == null) {
            return (newNode(key));
        }
        if (key < node.data) {
            node.left = insert(node.left, key);
        } else if (key > node.data) {
            node.right = insert(node.right, key);
        } else // Not Considering Duplicate Values
        {
            return node;
        }

        // Update height of this ancestor node
        node.height = 1 + max(height(node.left), height(node.right));

        // Get the height difference
        int heightDiff = getHeightDiff(node);

        // If node becomes unbalnced
        // LL Rotation
        if (heightDiff > 1 && key < node.left.data) {
            return rightRotation(node);
        }
        // RR Rotation
        if (heightDiff < -1 && key > node.right.data) {
            return leftRotation(node);
        }
        // LR Rotation
        if (heightDiff > 1 && key > node.left.data) {
            node.left = leftRotation(node.left);
            return rightRotation(node);
        }
        // RL Rotation
        if (heightDiff < -1 && key < node.right.data) {
            node.right = rightRotation(node.right);
            return leftRotation(node);
        }
        // return unchanged node pointer
        return node;
    }

    // Preorder traversal of the tree.
    void preOrder(TreeNode root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preOrder(root.left); // Call Left Sub Tree
            preOrder(root.right); // Call Right Sub Tree
        }
    }

    // Inorder traversal of the tree.
    void inOrder(TreeNode root) {
        if (root != null) {
            inOrder(root.left); // Call Left Sub Tree
            System.out.print(root.data + " ");
            inOrder(root.right); // Call Right Sub Tree
        }
    }

    // Postorder traversal of the tree.
    void postOrder(TreeNode root) {
        if (root != null) {
            postOrder(root.left);
            postOrder(root.right);
            System.out.print(root.data + " ");
        }
    }

    /* Drier program to test above function */
   public static void main(String[] args) {
    AVLTree tree = new AVLTree();
    TreeNode root = null;
    Scanner scanner = new Scanner(System.in);

    while (true) {
        System.out.println("Enter a number to insert into the AVL tree (or type 'X' to stop): ");
        String input = scanner.next();
        if (input.equalsIgnoreCase("X")) {
            break;
        }
        try {
            int num = Integer.parseInt(input);
            root = tree.insert(root, num);
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please enter an integer or 'X' to stop.");
        }
    }

    System.out.println("\nPreorder traversal of the constructed AVL tree is ");
    tree.preOrder(root);
    System.out.println();

    System.out.println("Inorder traversal of the constructed AVL tree is ");
    tree.inOrder(root);

    System.out.println("\nPostorder traversal of the constructed AVL tree is ");
    tree.postOrder(root);
}}
